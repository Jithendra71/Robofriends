{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","id","email","className","alt","src","CardList","robots","map","user","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","Response","json","users","searchedRobots","filter","robot","toLowerCase","includes","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,GAAGC,EAAU,EAAVA,MACnB,OACI,sBAAKC,UAAY,mDAAjB,UACI,qBAAKC,IAAM,QAAQC,IAAG,+BAA4BJ,EAA5B,mBACtB,gCACI,6BAAKD,IACL,4BAAIE,WCOLI,EAbE,SAAC,GACd,OAD2B,EAAZC,OAEJC,KAAI,SAAAC,GACP,OAAQ,cAAC,EAAD,CAEJR,GAAMQ,EAAKR,GACXD,KAAQS,EAAKT,KACbE,MAAOO,EAAKP,OAHLO,EAAKC,cCWbC,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qCACA,uBACAT,UAAY,mCACZU,KAAO,SACPC,YAAa,gBACbC,SAAYH,IAEZ,uBACA,2BCFOI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAS,CAACC,UAAU,SAAUC,OAAQ,kBAAkBC,OAAO,SAApE,SACKJ,EAAMK,YCkBJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAO,CACRC,UAAY,GAHF,E,qDAOlB,SAAkBC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAG5B,WACI,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAKX,MAAMK,a,GAhBEQ,aC4CbC,G,wDAtCX,aAAe,IAAD,8BACV,gBAYJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAZzC,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAY,IAJN,E,qDAOd,WAAoB,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACtB,OAAOkC,S,oBASxC,WAAS,IAAD,OACEC,EAAiBd,KAAKJ,MAAMjB,OAAOoC,QAAO,SAAAC,GAC5C,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAEpE,OACI,sBAAK1C,UAAY,KAAjB,UACI,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWS,aAAgBgB,KAAKI,iBAChC,wBACA,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQmC,e,GA/BxBK,IAAMjB,YCITkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7e178d47.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({name,id,email}) =>{\r\n    return(\r\n        <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt = \"robot\" src = {`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        robots.map(user => {\r\n            return (<Card \r\n                key = {user.username}  \r\n                id = {user.id} \r\n                name = {user.name} \r\n                email={user.email} \r\n                />);\r\n        })\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <>\r\n        <input \r\n        className = 'pa3 ba b--green bg-lightest-blue'\r\n        type = 'search' \r\n        placeholder ='Search Robots' \r\n        onChange = {searchChange}\r\n        />\r\n        <br/>\r\n        <br/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style = {{overflowY:'scroll', border :'2px solid black',height:'554px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            hasError  : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }    \r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Something went wrong :(</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots :[],\r\n            searchField:'',\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(Response => Response.json())\r\n        .then(users =>this.setState({robots:users}))\r\n    }\r\n    \r\n    onSearchChange = (event) =>{\r\n        this.setState({searchField: event.target.value})\r\n        \r\n        \r\n    }\r\n    \r\n    render(){\r\n        const searchedRobots = this.state.robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        })\r\n        return(\r\n            <div className = 'tc' >\r\n                <h1 className='f1'>Robo Friends</h1>\r\n                <SearchBox searchChange = {this.onSearchChange}/>\r\n                <div/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={searchedRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n// import {robots} from './robots';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n   <App/>\r\n  </React.StrictMode>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}